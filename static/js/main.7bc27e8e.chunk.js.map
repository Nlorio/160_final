{"version":3,"sources":["Build-A-Beat.svg","user_input/u_bass.mp3","user_input/u_snare.mp3","user_input/u_open_hh.mp3","user_input/u_closed_hh.mp3","real_drum/bass.mp3","real_drum/snare.mp3","real_drum/open_hh.mp3","real_drum/closed_hh.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","prop","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ready","setTimeout","temp","bass","snare","open","closed","console","log","setState","all_arg","preProcessingGivenType","u_bass","then","res","u_snare","u_open_hh","u_closed_hh","react_default","a","createElement","App_Sketch","data","React","Component","type","Promise","resolve","spectrums_with_amp","count","p5","fft","noise","amp","preload","soundFormats","loadSound","setup","play","FFT","setInput","Amplitude","draw","push","analyze","getLevel","i","max","length","analysis","Sketch","_this2","addSound","sound","now","Date","_last_sound_at","_playback_beat","onMousePress","playing","play_idx","playNext","duration","onMousePressClear","render","rec_button","recording","className","onClick","src","logo","alt","id","comp_data","loading","self","assertThisInitialized","sketch","mic","canvas_freq","analyzer","bass_sound","snare_sound","open_hh_sound","closed_hh_sound","output_sounds","average_sound","open_hh","closed_hh","createCanvas","noFill","parent","AudioIn","start","toggleNormalize","clear","strokeWeight","spectrum","beginShape","vertex","map","width","height","endShape","rms","scores","comp_spectrum","j","sum","Math","pow","centroids","centroid","getCentroid","score","idx","c","use","best_idx","best_score","s","_myp5","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.7bc27e8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Build-A-Beat.e68ea79d.svg\";","module.exports = __webpack_public_path__ + \"static/media/u_bass.48409fb8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_snare.deb9f781.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_open_hh.19a1b69b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_closed_hh.baa18b3d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bass.1446efbf.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.d67c01e0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/open_hh.2c2c7c72.mp3\";","module.exports = __webpack_public_path__ + \"static/media/closed_hh.911815c6.mp3\";","import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { ReactMic } from 'react-mic';\n// import MIDISounds from 'midi-sounds-react';\nimport logo from './Build-A-Beat.svg';\nimport './App.scss';\nimport p5 from 'p5';\nimport 'p5/lib/addons/p5.dom';\nimport 'p5/lib/addons/p5.sound';\n\n\n// Import user_input for analysis / bin creation\nimport u_bass from './user_input/u_bass.mp3';\nimport u_snare from './user_input/u_snare.mp3';\nimport u_open_hh from './user_input/u_open_hh.mp3';\nimport u_closed_hh from './user_input/u_closed_hh.mp3';\n\n// Import real_drum sounds\nimport bass from './real_drum/bass.mp3';\nimport snare from './real_drum/snare.mp3';\nimport open_hh from './real_drum/open_hh.mp3';\nimport closed_hh from './real_drum/closed_hh.mp3';\n\nclass App extends React.Component {\n  constructor(prop) {\n    super(prop);\n\n    this.state = {\n      ready : false\n    };\n\n    let process_bass = () => {\n      preProcessingGivenType(u_bass).then(res => {\n        console.log(res);\n        this.setState({bass: res});\n      });\n    };\n\n    let process_snare = () => {\n    preProcessingGivenType(u_snare).then(res => {\n      console.log(res);\n      this.setState({ snare : res });\n    });\n    };\n    let process_open = () => {\n      preProcessingGivenType(u_open_hh).then(res => {\n        console.log(res);\n        this.setState({open: res});\n      });\n    };\n\n    let process_closed = () => {\n      preProcessingGivenType(u_closed_hh).then(res => {\n        console.log(res);\n        this.setState({closed: res});\n      });\n    };\n\n    let build_arguments = () => {\n      let temp = [this.state.bass, this.state.snare, this.state.open, this.state.closed];\n      // let temp = {bass: this.state.bass,\n      //             snare: this.state.snare,\n      //             open: this.state.open,\n      //             closed: this.state.closed};\n      console.log(temp);\n      this.setState({all_arg : temp} );\n      this.setState( {ready : true} );\n    };\n    setTimeout(build_arguments, 12000);\n\n    setTimeout(process_bass, 1000);\n    setTimeout(process_snare, 2000);\n    setTimeout(process_open, 3000);\n    setTimeout(process_closed, 4000);\n\n\n\n    // debugger;\n  }\n  // this.state.bass\n  render() {\n    const {ready} = this.state;\n    console.log(ready);\n    return ready ? <Sketch data={this.state.all_arg}/> : <span> Loading Elements </span>;\n  }\n}\n\nfunction preProcessingGivenType(type) {\n  return new Promise(resolve => {\n    let spectrums_with_amp = [];\n    let count = 0;\n    // let processingP5;\n    // self._last_sound_at = 0;\n\n    const sketch = p => {\n      let fft;\n      let noise;\n      let amp;\n\n      p.preload = function () { // For audio analysis\n        p.soundFormats('mp3', 'ogg');\n        noise = p.loadSound(type);\n        // debugger;\n      };\n\n      p.setup = function () {\n        // debugger;\n        noise.play();\n        // debugger;\n        fft = new p5.FFT();\n        fft.setInput(noise);\n\n        amp = new p5.Amplitude();\n        amp.setInput(noise);\n      };\n\n      p.draw = function () {\n        // debugger;\n        spectrums_with_amp.push([fft.analyze(), amp.getLevel()]);\n        if (count === 400) {\n          // Find max amplitude and save the spectrum that occured at that point.\n          let max = [0, 0];\n          let i;\n          for (i = 0; i < spectrums_with_amp.length; i++) {\n            let analysis = spectrums_with_amp[i];\n            // console.log(analysis[0]);\n            if (analysis[1] > max[1]) {\n              max = [analysis[0], analysis[1]];\n            }\n          }\n\n          // save a value to be returned by the class/function\n          resolve(max);\n        }\n\n        count++;\n      };\n    };\n\n    const _ = new p5(sketch);\n  });\n}\n\nclass Sketch extends React.Component {\n  // new p5(this.sketch, this.root);\n  constructor(data) {\n    // run regular ass javascript inside the constructor\n    super(data); // Sets up the class for me\n\n    const comp_data = data.data;\n    console.log(data);\n    console.log(comp_data);\n\n    this.state = {\n      loading: true,\n      recording: false,\n    };\n\n    // Note for later: Create an array of noises to be played. If a \"beat\" is recognized\n    // then save that note to an array, if no \"beat\" is recognized then save that unrecognized\n    // noise to the array.\n    // Use p5 score to playback the series of sounds\n\n    const self = this;\n    self._playback_beat = [];\n    self._last_sound_at = 0;\n\n    // var p5 = require(\"p5\");\n    this.sketch = p => {\n      let mic, fft, canvas_freq, analyzer;\n      // let bass_fft, snare_fft, open_fft, closed_fft;\n      let bass_sound, snare_sound, open_hh_sound, closed_hh_sound;\n\n      let average_sound = 0;\n\n      let output_sounds;\n      // let source_sounds;\n\n\n      // Functions to be used for noise analysis\n      p.preload = function() { // For audio analysis\n        p.soundFormats('mp3', 'ogg');\n        // noise = p.loadSound('beat_box_beats/bass.mp3');\n        bass_sound = p.loadSound(bass);\n        snare_sound = p.loadSound(snare);\n        open_hh_sound = p.loadSound(open_hh);\n        closed_hh_sound = p.loadSound(closed_hh);\n\n      };\n\n\n      p.setup = function() {\n\n        canvas_freq = p.createCanvas(710, 200);\n        p.noFill();\n\n        canvas_freq.parent('freq_holder');\n        mic = new p5.AudioIn();\n        mic.start();\n        // console.log(\"I am recording you\");\n        fft = new p5.FFT();\n        fft.setInput(mic);\n\n        analyzer = new p5.Amplitude();\n        analyzer.toggleNormalize([1]);\n        analyzer.setInput(mic);\n\n        output_sounds = [ bass_sound, snare_sound, open_hh_sound, closed_hh_sound ];\n        // source_sounds = [ bass_noise, snare_noise, open_noise, closed_noise ];\n\n        self.setState({loading: false});\n      };\n\n      p.draw = function() {\n        p.clear();\n        p.strokeWeight(1.5);\n        // console.log(\"I wanna draw\");\n        // Analyze and display spectrum of frequency\n        let spectrum = fft.analyze();\n        // console.log(spectrum);\n        p.beginShape();\n        for (let i = 0; i < spectrum.length; i++) {\n          p.vertex(\n            p.map(i, 0, 1024, 0, p.width),\n            p.map(spectrum[i], 0, 255, p.height, 0)\n          );\n        }\n        p.endShape();\n        \n        // const values = spectrums.map(spec => {\n        //   let sum = 0;\n        //   for (let i = 0; i < spectrum.length; i++) {\n        //     sum = sum + (spectrum[i] - spec[i]) ^ 2;\n        //   }\n        //   return sum\n        // });\n\n        // console.log(values);\n\n        // values.forEach((v, idx) => {\n        //   p.rect(\n        //     p.map(idx, 0, values.length, 0, p.width),\n        //     0,\n        //     p.width / values.length,\n        //     p.map(v, 0, 46000, 0, p.height),\n        //   );\n        // });\n\n        // console.log(\"Centroid of Freq: \" + fft.getCentroid());\n        //\n        // console.log(\"Bass Energy of Freq: \" + fft.getEnergy(\"bass\"));\n        // console.log(\"lowMid Energy of Freq: \" + fft.getEnergy(\"lowMid\"));\n        // console.log(\"mid Energy of Freq: \" + fft.getEnergy(\"mid\"));\n        // console.log(\"midHigh Energy of Freq: \" + fft.getEnergy(\"highMid\"));\n        // console.log(\"treble Energy of Freq: \" + fft.getEnergy(\"treble\"));\n        //\n        // console.log(\"Lin Averages of Freq: \" + fft.linAverages(4));\n        // console.log(\"Log Averages of Freq: \" + fft.logAverages(4));\n\n        // Analyze and interpret amplitude\n        let rms = analyzer.getLevel();\n        // console.log(\"Amplitude: \" + rms);\n\n        // let bass = false;\n        // let snare = false;\n        // let hi_hat_o = false;\n        // let hi_hat_c = false;\n\n        // Thresholds & Beats based off of input\n        // FREQ If certain element of frequency spectrum is greater than some threshold\n        // AMP If amplitude level is greater than some threshold\n        // MIDI If note returned for frequency value is equal to some value?\n\n\n        if (!self.state.recording) {\n          return;\n        }\n\n\n        // Determine score - Cycle through each spectrum calculate score for each - lowest sum = highest score\n        let i;\n        let scores = [];\n        // debugger;\n        // let scoring_comparison = scoring_comparison_data;\n        for (i = 0; i < comp_data.length; i++) {\n          // debugger;\n          let comp_spectrum = comp_data[i][0];\n          let j;\n          let sum = 0;\n          for (j = 0; j < spectrum.length; j++) {\n            sum += Math.pow(spectrum[j] - comp_spectrum[j], 2);\n          }\n          scores.push(sum);\n        }\n        // console.log(scores);\n\n\n\n        const centroids = [\n          816, 8980, 10221, 10306\n        ];\n        const amps = [\n          0.058, 0.107, 0.384, 0.4431\n        ];\n\n        const centroid = fft.getCentroid();\n\n        const score = (idx) => {\n          const c = centroids[idx];\n          const a = amps[idx];\n\n          return Math.pow(c - centroid, 2);\n        };\n\n\n        // noise_spectrums =\n        // const values = spectrums.map(spec => {\n        //   let sum = 0;\n        //   for (let i = 0; i < spectrum.length; i++) {\n        //     sum = sum + (spectrum[i] - spec[i]) ^ 2;\n        //   }\n        //   return sum\n        // });\n\n\n\n        const use = rms > average_sound * 1.5;\n        // console.log(average_sound, rms);\n        average_sound = average_sound * 0.7 + rms * 0.3;\n\n        if (!use) {\n          return;\n        }\n\n        let best_idx = 0;\n        let best_score = score(0);\n\n        for (let i = 0; i < output_sounds.length; ++i) {\n          console.log(\"new: \" + scores[i]);\n          console.log(\"old: \" + score(i));\n          // const s = score(i);\n          const s = scores[i];\n          if (s < best_score) {\n            best_score = s;\n            best_idx = i;\n          }\n        }\n\n        self.addSound(output_sounds[best_idx]);\n\n\n\n        // Build a score (ranks score in relation to bass, snare, open, close) - Build from input and its relation to the user_input tested noise\n\n      };\n    };\n\n    this._myp5 = new p5(this.sketch);\n  }\n\n  addSound = (sound) => {\n    const now = Date.now();\n    if (now - this._last_sound_at < 500) {\n      return;\n    }\n\n    // console.log('sound added');\n\n    this._last_sound_at = now;\n    this._playback_beat.push(sound);\n    sound.play();\n  };\n\n  onMousePress= () => {\n    if (this.state.playing) {\n      return;\n    }\n\n    this.setState({ playing: true });\n\n    let play_idx = 0;\n\n    const playNext = () => {\n      if (play_idx >= this._playback_beat.length) {\n        this.setState({ playing: false });\n        return;\n      }\n\n      const sound = this._playback_beat[play_idx++];\n      sound.play();\n      setTimeout(playNext, sound.duration() * 2000);\n    };\n\n    playNext();\n\n  };\n\n onMousePressClear = () => {\n   if (this.state.playing) {\n     return;\n   }\n\n   // Reset playback beat array\n  this._playback_beat.length = 0;\n\n  };\n\n\n  render = () => {\n    const rec_button = this.state.recording\n        ? <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: false})}>Stop</button>\n        : <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: true})}>Start</button>;\n\n    return (\n        // console.log(this.sketch(p5)),\n        <div className={'App' + (this.state.recording ? ' rec' : '')}>\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <p>\n              Build-A-Beat\n            </p>\n            <div id=\"freq_holder\"></div>\n\n            <div id=\"button_holder\">\n              {rec_button}\n              <button className=\"buttons\" type=\"button\" onClick={this.onMousePress}>Build My Beat</button>\n              <button className=\"buttons\" type=\"button\" onClick={this.onMousePressClear}>Clear</button>\n\n            </div>\n\n            {/*Fake export button */}\n            <button className=\"export_button\" type=\"button\" >Export</button>\n\n          </div>\n        </div>\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}