{"version":3,"sources":["Build-A-Beat.svg","user_input/u_bass.mp3","user_input/u_snare.mp3","user_input/u_open_hh.mp3","user_input/u_closed_hh.mp3","real_drum/bass.mp3","real_drum/snare.mp3","real_drum/open_hh.mp3","real_drum/closed_hh.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","App_Sketch","React","Component","Sketch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addSound","sound","now","Date","_last_sound_at","console","log","_playback_beat","push","play","onMousePress","state","playing","setState","play_idx","playNext","length","setTimeout","duration","onMousePressClear","render","rec_button","recording","className","type","onClick","src","logo","alt","id","loading","self","assertThisInitialized","sketch","mic","fft","canvas_freq","analyzer","bass_noise","snare_noise","open_noise","closed_noise","bass_sound","snare_sound","open_hh_sound","closed_hh_sound","output_sounds","source_sounds","average_sound","preload","soundFormats","loadSound","bass","snare","open_hh","closed_hh","u_bass","u_snare","u_open_hh","u_closed_hh","setup","createCanvas","noFill","parent","p5","AudioIn","start","FFT","setInput","Amplitude","toggleNormalize","draw","clear","spectrum","analyze","beginShape","i","vertex","map","width","height","endShape","rms","getLevel","centroids","centroid","getCentroid","score","idx","c","Math","pow","use","best_idx","best_score","s","_myp5","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.828b0b01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Build-A-Beat.e68ea79d.svg\";","module.exports = __webpack_public_path__ + \"static/media/u_bass.48409fb8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_snare.deb9f781.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_open_hh.19a1b69b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_closed_hh.baa18b3d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bass.1446efbf.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.d67c01e0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/open_hh.2c2c7c72.mp3\";","module.exports = __webpack_public_path__ + \"static/media/closed_hh.911815c6.mp3\";","import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { ReactMic } from 'react-mic';\n// import MIDISounds from 'midi-sounds-react';\nimport logo from './Build-A-Beat.svg';\nimport './App.scss';\nimport p5 from 'p5';\nimport 'p5/lib/addons/p5.dom';\nimport 'p5/lib/addons/p5.sound';\n\n\n// Import user_input for analysis / bin creation\nimport u_bass from './user_input/u_bass.mp3';\nimport u_snare from './user_input/u_snare.mp3';\nimport u_open_hh from './user_input/u_open_hh.mp3';\nimport u_closed_hh from './user_input/u_closed_hh.mp3';\n\n// Import real_drum sounds\nimport bass from './real_drum/bass.mp3';\nimport snare from './real_drum/snare.mp3';\nimport open_hh from './real_drum/open_hh.mp3';\nimport closed_hh from './real_drum/closed_hh.mp3';\n\nclass App extends React.Component {\n  render() {\n    return (\n        <Sketch />\n\n    );\n  }\n}\n\n// P5 Analyze Stream of Audio\nclass Sketch extends React.Component {\n  // new p5(this.sketch, this.root);\n  constructor(props) {\n    // run regular ass javascript inside the constructor\n    super(props); // Sets up the class for me\n\n    this.state = {\n      loading: true,\n      recording: false,\n    };\n\n    // Note for later: Create an array of noises to be played. If a \"beat\" is recognized\n    // then save that note to an array, if no \"beat\" is recognized then save that unrecognized\n    // noise to the array.\n    // Use p5 score to playback the series of sounds\n\n    const self = this;\n    self._playback_beat = [];\n    self._last_sound_at = 0;\n\n    // var p5 = require(\"p5\");\n    this.sketch = p => {\n      let mic, fft, canvas_freq, analyzer;\n      let bass_fft, snare_fft, open_fft, closed_fft;\n      let bass_noise, snare_noise, open_noise, closed_noise;\n      let bass_sound, snare_sound, open_hh_sound, closed_hh_sound;\n\n      let average_sound = 0;\n\n      let output_sounds;\n      let source_sounds;\n\n\n      // Functions to be used for noise analysis\n      p.preload = function() { // For audio analysis\n        p.soundFormats('mp3', 'ogg');\n        // noise = p.loadSound('beat_box_beats/bass.mp3');\n        bass_sound = p.loadSound(bass);\n        snare_sound = p.loadSound(snare);\n        open_hh_sound = p.loadSound(open_hh);\n        closed_hh_sound = p.loadSound(closed_hh);\n\n        // Load in noise, loop noise and analyze the beats one by one to determine threshold\n        bass_noise = p.loadSound(u_bass);\n        snare_noise = p.loadSound(u_snare);\n        open_noise = p.loadSound(u_open_hh);\n        closed_noise = p.loadSound(u_closed_hh);\n      };\n\n      // p.setup = function () {\n      //   // noise.loop();\n      //   noise.play();\n      //   fft = new p5.FFT();\n      //   fft.setInput(noise);\n      //\n      //   analyzer = new p5.Amplitude();\n      //   analyzer.setInput(noise);\n      //\n      // };\n\n      p.setup = function() {\n\n        canvas_freq = p.createCanvas(710, 200);\n        p.noFill();\n\n        canvas_freq.parent('freq_holder');\n        mic = new p5.AudioIn();\n        mic.start();\n        // console.log(\"I am recording you\");\n        fft = new p5.FFT();\n        fft.setInput(mic);\n\n        analyzer = new p5.Amplitude();\n        analyzer.toggleNormalize([1]);\n        analyzer.setInput(mic);\n\n        output_sounds = [ bass_sound, snare_sound, open_hh_sound, closed_hh_sound ];\n        source_sounds = [ bass_noise, snare_noise, open_noise, closed_noise ];\n\n        self.setState({loading: false});\n      };\n\n      p.draw = function() {\n        p.clear();\n\n        // console.log(\"I wanna draw\");\n        // Analyze and display spectrum of frequency\n        let spectrum = fft.analyze();\n        // console.log(spectrum);\n        p.beginShape();\n        for (let i = 0; i < spectrum.length; i++) {\n          p.vertex(\n            p.map(i, 0, 1024, 0, p.width),\n            p.map(spectrum[i], 0, 255, p.height, 0)\n          );\n        }\n        p.endShape();\n        \n        // const values = spectrums.map(spec => {\n        //   let sum = 0;\n        //   for (let i = 0; i < spectrum.length; i++) {\n        //     sum = sum + (spectrum[i] - spec[i]) ^ 2;\n        //   }\n        //   return sum\n        // });\n\n        // console.log(values);\n\n        // values.forEach((v, idx) => {\n        //   p.rect(\n        //     p.map(idx, 0, values.length, 0, p.width),\n        //     0,\n        //     p.width / values.length,\n        //     p.map(v, 0, 46000, 0, p.height),\n        //   );\n        // });\n\n        // console.log(\"Centroid of Freq: \" + fft.getCentroid());\n        //\n        // console.log(\"Bass Energy of Freq: \" + fft.getEnergy(\"bass\"));\n        // console.log(\"lowMid Energy of Freq: \" + fft.getEnergy(\"lowMid\"));\n        // console.log(\"mid Energy of Freq: \" + fft.getEnergy(\"mid\"));\n        // console.log(\"midHigh Energy of Freq: \" + fft.getEnergy(\"highMid\"));\n        // console.log(\"treble Energy of Freq: \" + fft.getEnergy(\"treble\"));\n        //\n        // console.log(\"Lin Averages of Freq: \" + fft.linAverages(4));\n        // console.log(\"Log Averages of Freq: \" + fft.logAverages(4));\n\n        // Analyze and interpret amplitude\n        let rms = analyzer.getLevel();\n        // console.log(\"Amplitude: \" + rms);\n\n        // let bass = false;\n        // let snare = false;\n        // let hi_hat_o = false;\n        // let hi_hat_c = false;\n\n        // Thresholds & Beats based off of input\n        // FREQ If certain element of frequency spectrum is greater than some threshold\n        // AMP If amplitude level is greater than some threshold\n        // MIDI If note returned for frequency value is equal to some value?\n\n\n        if (!self.state.recording) {\n          return;\n        }\n\n        const centroids = [\n          816, 8980, 10221, 10306\n        ];\n        const amps = [\n          0.058, 0.107, 0.384, 0.4431\n        ];\n\n        const centroid = fft.getCentroid();\n\n        const score = (idx) => {\n          const c = centroids[idx];\n          const a = amps[idx];\n\n          return Math.pow(c - centroid, 2);\n        };\n\n\n        const use = rms > average_sound * 1.5;\n        console.log(average_sound, rms);\n        average_sound = average_sound * 0.7 + rms * 0.3;\n\n        if (!use) {\n          return;\n        }\n\n        let best_idx = 0;\n        let best_score = score(0);\n\n        for (let i = 1; i < source_sounds.length; ++i) {\n          const s = score(i);\n          if (s < best_score) {\n            best_score = s;\n            best_idx = i;\n          }\n        }\n\n        self.addSound(output_sounds[best_idx]);\n\n\n\n        // Build a score (ranks score in relation to bass, snare, open, close) - Build from input and its relation to the user_input tested noise\n\n// \n//         // Conditional Sound Play\n//         if (fft.getCentroid() > 800 && fft.getCentroid() < 1000 && rms > 0.058) {\n//           bass = true;\n//         }\n// \n//         if (fft.getCentroid() > 8900 && fft.getCentroid() < 10100 && rms > 0.107) {\n//           snare = true;\n//         }\n// \n//         if (fft.getCentroid() > 10100 && fft.getCentroid() < 10300 && rms > 0.384) {\n//           hi_hat_o = true;\n//         }\n// \n//         bass_fft = new p5.FFT();\n//         if (fft.getCentroid() > 10300 && fft.getCentroid() < 10500 && rms > 0.4431) {\n//           hi_hat_c = true;\n//         }\n// \n//         // Actually play sounds / save phrases to score for later playback\n//         if (bass) {\n//           // Play sound if user input is recognized to be a beat\n//           bass = false;\n// \n//           self.addSound(bass_sound);\n//         }\n// \n//         if (snare) {\n//           // Play sound if user input is recognized to be a beat\n//           snare = false;\n// \n// \n//           self.addSound(snare_sound);\n// \n//         }\n// \n//         if (hi_hat_o) {\n//           // Play sound if user input is recognized to be a beat\n//           hi_hat_o = false;\n// \n//           self.addSound(open_hh_sound);\n//         }\n// \n// \n//         if (hi_hat_c) {\n//           // Play sound if user input is recognized to be a beat\n//           hi_hat_c = false;\n// \n//           self.addSound(closed_hh_sound);\n//         }\n      };\n    };\n\n    this._myp5 = new p5(this.sketch);\n  }\n\n  addSound = (sound) => {\n    const now = Date.now();\n    if (now - this._last_sound_at < 500) {\n      return;\n    }\n\n    console.log('sound added');\n\n    this._last_sound_at = now;\n    this._playback_beat.push(sound);\n    sound.play();\n  };\n\n  onMousePress= () => {\n    if (this.state.playing) {\n      return;\n    }\n\n    this.setState({ playing: true });\n\n    let play_idx = 0;\n\n    const playNext = () => {\n      if (play_idx >= this._playback_beat.length) {\n        this.setState({ playing: false });\n        return;\n      }\n\n      const sound = this._playback_beat[play_idx++];\n      sound.play();\n      setTimeout(playNext, sound.duration() * 1000);\n    };\n\n    playNext();\n\n  };\n\n onMousePressClear = () => {\n   if (this.state.playing) {\n     return;\n   }\n\n   // Reset playback beat array\n  this._playback_beat.length = 0;\n\n  };\n\n\n  render = () => {\n    const rec_button = this.state.recording\n        ? <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: false})}>Stop</button>\n        : <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: true})}>Start</button>;\n\n    return (\n        // console.log(this.sketch(p5)),\n        <div className={'App' + (this.state.recording ? ' rec' : '')}>\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <p>\n              Build-A-Beat\n            </p>\n            <div id=\"freq_holder\"></div>\n\n            {/*// onClick={}*/}\n            <div id=\"button_holder\">\n              {rec_button}\n              <button className=\"buttons\" type=\"button\" onClick={this.onMousePress}>Build My Beat</button>\n              <button className=\"buttons\" type=\"button\" onClick={this.onMousePressClear}>Clear</button>\n\n               {/*Fake export button */}\n              {/*<button className=\"buttons\" type=\"button\">One to One Beat Maker Mode</button>*/}\n            </div>\n\n            <button className=\"export_button\" type=\"button\" >Export</button>\n\n          </div>\n        </div>\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}