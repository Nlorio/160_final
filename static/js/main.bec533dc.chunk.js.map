{"version":3,"sources":["Build-A-Beat.svg","user_input/u_bass.mp3","user_input/u_snare.mp3","user_input/u_open_hh.mp3","user_input/u_closed_hh.mp3","real_drum/bass.mp3","real_drum/snare.mp3","real_drum/open_hh.mp3","real_drum/closed_hh.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","window","_playback_beat","App","react_default","a","createElement","App_Sketch","React","Component","Sketch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMousePress","main_score","console","log","length","parts","p5","Part","forEach","item","addPhrase","Phrase","rate","play","playback","Score","start","render","rec_button","state","recording","className","type","onClick","setState","src","logo","alt","id","loading","self","assertThisInitialized","sketch","mic","fft","canvas_freq","analyzer","bass_fft","snare_fft","open_fft","closed_fft","bass_noise","snare_noise","open_noise","closed_noise","bass_sound","snare_sound","open_hh_sound","closed_hh_sound","preload","soundFormats","loadSound","bass","snare","open_hh","closed_hh","u_bass","u_snare","u_open_hh","u_closed_hh","setup","FFT","setInput","createCanvas","noFill","parent","AudioIn","Amplitude","toggleNormalize","draw","background","spectrum","analyze","beginShape","i","vertex","map","height","endShape","spectrum_bass","spectrum_snare","spectrum_open","spectrum_closed","rms","getLevel","hi_hat_o","hi_hat_c","bass_sum","getCentroid","snare_sum","open_sum","closed_sum","push","_myp5","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bec533dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Build-A-Beat.e68ea79d.svg\";","module.exports = __webpack_public_path__ + \"static/media/u_bass.48409fb8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_snare.deb9f781.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_open_hh.19a1b69b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/u_closed_hh.baa18b3d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bass.1446efbf.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.d67c01e0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/open_hh.2c2c7c72.mp3\";","module.exports = __webpack_public_path__ + \"static/media/closed_hh.911815c6.mp3\";","import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { ReactMic } from 'react-mic';\n// import MIDISounds from 'midi-sounds-react';\nimport logo from './Build-A-Beat.svg';\nimport './App.scss';\nimport p5 from 'p5';\nimport 'p5/lib/addons/p5.dom';\nimport 'p5/lib/addons/p5.sound';\n\n\n// Import user_input for analysis / bin creation\nimport u_bass from './user_input/u_bass.mp3';\nimport u_snare from './user_input/u_snare.mp3';\nimport u_open_hh from './user_input/u_open_hh.mp3';\nimport u_closed_hh from './user_input/u_closed_hh.mp3';\n\n// Import real_drum sounds\nimport bass from './real_drum/bass.mp3';\nimport snare from './real_drum/snare.mp3';\nimport open_hh from './real_drum/open_hh.mp3';\nimport closed_hh from './real_drum/closed_hh.mp3';\n\nwindow._playback_beat = [];\n\nclass App extends React.Component {\n  render() {\n    return (\n        <Sketch />\n\n    );\n  }\n}\n\n// P5 Analyze Stream of Audio\nclass Sketch extends React.Component {\n  // new p5(this.sketch, this.root);\n  constructor(props) {\n    // run regular ass javascript inside the constructor\n    super(props); // Sets up the class for me\n\n    this.state = {\n      loading: true,\n      recording: false,\n    };\n\n    // Note for later: Create an array of noises to be played. If a \"beat\" is recognized\n    // then save that note to an array, if no \"beat\" is recognized then save that unrecognized\n    // noise to the array.\n    // Use p5 score to playback the series of sounds\n\n    const self = this;\n\n    // var p5 = require(\"p5\");\n    this.sketch = p => {\n      let mic, fft, canvas_freq, analyzer;\n      let bass_fft, snare_fft, open_fft, closed_fft;\n      let bass_noise, snare_noise, open_noise, closed_noise;\n      let bass_sound, snare_sound, open_hh_sound, closed_hh_sound;\n\n      // Functions to be used for noise analysis\n      p.preload = function() { // For audio analysis\n        p.soundFormats('mp3', 'ogg');\n        // noise = p.loadSound('beat_box_beats/bass.mp3');\n        bass_sound = p.loadSound(bass);\n        snare_sound = p.loadSound(snare);\n        open_hh_sound = p.loadSound(open_hh);\n        closed_hh_sound = p.loadSound(closed_hh);\n\n        // Load in noise, loop noise and analyze the beats one by one to determine threshold\n        bass_noise = p.loadSound(u_bass);\n        snare_noise = p.loadSound(u_snare);\n        open_noise = p.loadSound(u_open_hh);\n        closed_noise = p.loadSound(u_closed_hh);\n      };\n\n      // p.setup = function () {\n      //   // noise.loop();\n      //   noise.play();\n      //   fft = new p5.FFT();\n      //   fft.setInput(noise);\n      //\n      //   analyzer = new p5.Amplitude();\n      //   analyzer.setInput(noise);\n      //\n      // };\n\n      p.setup = function() {\n        bass_fft = new p5.FFT();\n        bass_fft.setInput(bass_noise);\n\n        snare_fft = new p5.FFT();\n        snare_fft.setInput(snare_noise);\n\n        open_fft = new p5.FFT();\n        open_fft.setInput(open_noise);\n\n        closed_fft = new p5.FFT();\n        closed_fft.setInput(closed_noise);\n\n        canvas_freq = p.createCanvas(710, 200);\n        p.noFill();\n\n        canvas_freq.parent('freq_holder');\n        mic = new p5.AudioIn();\n        mic.start();\n        // console.log(\"I am recording you\");\n        fft = new p5.FFT();\n        fft.setInput(mic);\n\n        analyzer = new p5.Amplitude();\n        analyzer.toggleNormalize([1]);\n        analyzer.setInput(mic);\n\n        self.setState({loading: false});\n      };\n\n      p.draw = function() {\n        if (self.state.recording) {\n          // actually draw graphic\n          p.background(80, 44, 52);\n        } else {\n          // actually draw graphic\n          p.background(40, 44, 52);\n        }\n\n        // console.log(\"I wanna draw\");\n        // Analyze and display spectrum of frequency\n        let spectrum = fft.analyze();\n        // console.log(spectrum);\n        p.beginShape();\n        for (let i = 0; i < spectrum.length; i++) {\n          p.vertex(i, p.map(spectrum[i], 0, 255, p.height, 0));\n        }\n        p.endShape();\n\n        if (!self.state.recording) {\n          return;\n        }\n\n        let spectrum_bass = bass_fft.analyze();\n        let spectrum_snare = snare_fft.analyze();\n        let spectrum_open = open_fft.analyze();\n        let spectrum_closed = closed_fft.analyze();\n\n\n        // console.log(\"Centroid of Freq: \" + fft.getCentroid());\n        //\n        // console.log(\"Bass Energy of Freq: \" + fft.getEnergy(\"bass\"));\n        // console.log(\"lowMid Energy of Freq: \" + fft.getEnergy(\"lowMid\"));\n        // console.log(\"mid Energy of Freq: \" + fft.getEnergy(\"mid\"));\n        // console.log(\"midHigh Energy of Freq: \" + fft.getEnergy(\"highMid\"));\n        // console.log(\"treble Energy of Freq: \" + fft.getEnergy(\"treble\"));\n        //\n        // console.log(\"Lin Averages of Freq: \" + fft.linAverages(4));\n        // console.log(\"Log Averages of Freq: \" + fft.logAverages(4));\n\n        // Analyze and interpret amplitude\n        let rms = analyzer.getLevel();\n        // console.log(\"Amplitude: \" + rms);\n\n        let bass = false;\n        let snare = false;\n        let hi_hat_o = false;\n        let hi_hat_c = false;\n\n        // Thresholds & Beats based off of input\n        // FREQ If certain element of frequency spectrum is greater than some threshold\n        // AMP If amplitude level is greater than some threshold\n        // MIDI If note returned for frequency value is equal to some value?\n\n        let threshold = 0.1;\n\n        let bass_sum = 0;\n        for (let i = 0; i < spectrum.length; i++) {\n          bass_sum = bass_sum + (spectrum[i] - spectrum_bass[i]) ^ 2;\n        }\n        // console.log(bass_sum);\n        // if (bass_sum) {\n        //\n        // }\n\n        if (fft.getCentroid() > 800 && fft.getCentroid() < 1000 && rms > 0.058) {\n          bass = true;\n        }\n\n\n        let snare_sum = 0;\n        for (let i = 0; i < spectrum.length; i++) {\n          snare_sum = snare_sum + (spectrum[i] - spectrum_snare[i]) ^ 2;\n        }\n        if (fft.getCentroid() > 8900 && fft.getCentroid() < 10100 && rms > 0.107) {\n          snare = true;\n        }\n\n\n        let open_sum = 0;\n        for (let i = 0; i < spectrum.length; i++) {\n          open_sum = open_sum + (spectrum[i] - spectrum_open[i]) ^ 2;\n        }\n        if (fft.getCentroid() > 10100 && fft.getCentroid() < 10300 && rms > 0.384) {\n          hi_hat_o = true;\n        }\n        // p.setup = function () {\n        //   // noise.loop();\n        //   noise.play();\n        //   fft = new p5.FFT();\n        //   fft.setInput(noise);\n        //\n        //   analyzer = new p5.Amplitude();\n        //   analyzer.setInput(noise);\n        //\n        // };\n\n        bass_fft = new p5.FFT();\n        let closed_sum = 0;\n        for (let i = 0; i < spectrum.length; i++) {\n          closed_sum = closed_sum + (spectrum[i] - spectrum_closed[i]) ^ 2;\n        }\n        if (fft.getCentroid() > 10300 && fft.getCentroid() < 10500 && rms > 0.4431) {\n          hi_hat_c = true;\n        }\n\n        if (bass) {\n          // Play sound if user input is recognized to be a beat\n          bass_sound.play();\n\n          // Add sound to score\n          window._playback_beat.push(bass_sound);\n          bass = false;\n\n        }\n\n        if (snare) {\n          // Play sound if user input is recognized to be a beat\n          snare_sound.play();\n\n          // Add sound to score\n          window._playback_beat.push(snare_sound);\n          snare = false;\n\n        }\n\n        if (hi_hat_o) {\n          // Play sound if user input is recognized to be a beat\n          open_hh_sound.play();\n\n          // Add sound to score\n          window._playback_beat.push(open_hh_sound);\n          hi_hat_o = false;\n        }\n\n\n        if (hi_hat_c) {\n          // Play sound if user input is recognized to be a beat\n          closed_hh_sound.play();\n\n          // Add sound to score\n          window._playback_beat.push(closed_hh_sound);\n          hi_hat_c = false;\n        }\n      };\n    };\n\n    this._myp5 = new p5(this.sketch);\n  }\n\n  onMousePress= () => {\n    let main_score;\n    console.log(window._playback_beat);\n\n    function playback(item) {\n      item.rate(1);\n      item.play(0);\n    }\n\n    if (window._playback_beat.length > 0) {\n      const parts = new p5.Part();\n      // window._playback_beat.forEach(item => parts.addPhrase(() => item.play()));\n      window._playback_beat.forEach(item => parts.addPhrase(() => new p5.Phrase('beat', playback(item), [1])));\n      main_score = new p5.Score(parts);\n      console.log(main_score);\n      debugger;\n      main_score.start();\n    }\n  };\n\n\n  render = () => {\n    const rec_button = this.state.recording\n        ? <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: false})}>Stop</button>\n        : <button className=\"buttons\" type=\"button\" onClick={() => this.setState({recording: true})}>Start</button>;\n\n    return (\n        // console.log(this.sketch(p5)),\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <p>\n              Build-A-Beat\n            </p>\n            <div id=\"freq_holder\"></div>\n\n            {/*// onClick={}*/}\n            <div id=\"button_holder\">\n              {rec_button}\n              <button className=\"buttons\" type=\"button\" onClick={this.onMousePress}>Build My Beat</button>\n              {/*<button className=\"buttons\" type=\"button\">One to One Beat Maker Mode</button>*/}\n            </div>\n\n          </div>\n        </div>\n    );\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}